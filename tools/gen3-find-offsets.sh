#!/bin/bash
# This script uses hexgrep (https://xyne.archlinux.ca/projects/hexgrep/) to search
# through generation 3 roms to find the offet of relevant data to the randomizer.

FILE=$1

POKEMON_VERSION=$(dd if="$FILE" ibs=1 skip=160 count=12 2>/dev/null)

case $POKEMON_VERSION in
	"POKEMON EMER")
        # In Emerald, the trainer table starts with a dummy trainer, followed by
        # some hiker:
        # https://github.com/pret/pokeemerald/blob/master/data/trainers.inc
        TRAINERS_START_OFFSET=$(                                               \
            hexgrep                                                            \
            0x00 0x00 0x00 0x00 0xff 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   \
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   \
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   \
            0x00                                                               \
                                                                               \
            0x00 0x02 0x0b 0x00 0xcd 0xbb 0xd1 0xd3 0xbf 0xcc 0xff 0x00 0x00   \
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   \
            0x00 0x00 0x07 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x2c 0xb6 0x30   \
            0x08                                                               \
            -f "$FILE" | awk '{print $1;}')

        # The last trainer is MAY_16
        TRAINERS_LAST_ENTRY=$(                                                 \
            hexgrep                                                            \
            0x00 0x41 0x80 0x5c 0xc7 0xbb 0xd3 0xff 0x00 0x00 0x00 0x00 0x00   \
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00   \
            0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0xcc 0xfc 0x30   \
            0x08                                                               \
            -f "$FILE" | awk '{print $1;}')
        TRAINERS_END_OFFSET="$(echo "obase=16;ibase=16;${TRAINERS_LAST_ENTRY^^} + 28" | bc)"
        ;;
	"POKEMON RUBY" | "POKEMON SAPP")
        echo "TODO: POKEMON RUBY SAPPHIRE"
        exit 1
        ;;
	*)
        echo "Invalid Pok√©mon version: $POKEMON_VERSION"
        exit 1
        ;;
esac

# The moves table starts with a dummy move (probably the move reprecenting no
# move), followed by pound:
# https://github.com/pret/pokeemerald/blob/master/data/battle_moves.inc
MOVES_START_OFFSET=$(                                                          \
    hexgrep                                                                    \
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00                \
                                                                               \
    0x00 0x28 0x00 0x64 0x23 0x00 0x00 0x00 0x33 0x00 0x00 0x00                \
    -f "$FILE" | awk '{print $1;}')

MOVES_LAST_ENTRY=$(                                                            \
    hexgrep                                                                    \
    0xcc 0x8c 0x0e 0x5a 0x05 0x64 0x00 0x00 0x32 0x00 0x00 0x00                \
    -f "$FILE" | awk '{print $1;}')
MOVES_END_OFFEST="$(echo "obase=16;ibase=16;${MOVES_LAST_ENTRY^^} + C" | bc)"

# The base stats table starts with a dummy mon, follow by bulbasaur:
# https://github.com/pret/pokeemerald/blob/master/data/base_stats.inc
BASE_STATS_START_OFFSET=$(                                                     \
    hexgrep                                                                    \
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00      \
    0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00      \
                                                                               \
    0x2D 0x31 0x31 0x2D 0x41 0x41 0x0C 0x03 0x2D 0x40 0x00 0x01 0x00 0x00      \
    0x00 0x00 0x1F 0x14 0x46 0x03 0x01 0x07 0x41 0x00 0x00 0x03 0x00 0x00      \
    -f "$FILE" | awk '{print $1;}')

# The last entry is chimecho
BASE_STATS_LAST_ENTRY=$(                                                       \
    hexgrep                                                                    \
    0x41 0x32 0x46 0x41 0x5f 0x50 0x0e 0x0e 0x2d 0x93 0x00 0x05 0x00 0x00      \
    0x00 0x00 0x7f 0x19 0x46 0x04 0x0b 0x0b 0x1a 0x00 0x00 0x01 0x00 0x00      \
    -f "$FILE" | awk '{print $1;}')
BASE_STATS_END_OFFEST="$(echo "obase=16;ibase=16;${BASE_STATS_LAST_ENTRY^^} + 1C" | bc)"

echo "trainers start:   0x$TRAINERS_START_OFFSET"
echo "trainers end:     0x$TRAINERS_END_OFFSET"
echo "moves start:      0x$MOVES_START_OFFSET"
echo "moves end:        0x$MOVES_END_OFFEST"
echo "base_stats start: 0x${BASE_STATS_START_OFFSET^^}"
echo "base_stats end:   0x$BASE_STATS_END_OFFEST"

